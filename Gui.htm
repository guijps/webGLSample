<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
  <title>Gui</title>
  <script type="text/javascript" src="./Gui_files/glMatrix-0.9.5.min.js"></script>
  <script type="text/javascript" src="./Gui_files/webgl-utils.js"></script>
  
  <script id="shader-fs" type="x-shader/x-fragment">
    precision mediump float;
    varying vec4 vColor;
    void main(void) {
      gl_FragColor = vColor;
    }
  </script>
  
  <script id="shader-vs" type="x-shader/x-vertex">
    attribute vec3 aVertexPosition;
    attribute vec4 aVertexColor;
    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;
    varying vec4 vColor;
    void main(void) {
      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
      vColor = aVertexColor;
    }
  </script>
  
  <script type="text/javascript">
  
  // INICIALIZACAO DO AMBIENTE GERAL ===================================================
  
    var gl;
  
    function initGL(canvas) {
      try {
          gl = canvas.getContext("experimental-webgl");
          gl.viewportWidth  = canvas.width;
          gl.viewportHeight = canvas.height;
      } catch (e) {
      }
      if (!gl) {
          alert("Could not initialise WebGL, sorry :-(");
      }
    }
  
  
  // INICIALIZACAO/PARAMETRIZACAO DO SHADER (MODULO QUE CALCULA A ILUMINACAO) ==========================
  
    function getShader(gl, id) {
      var shaderScript = document.getElementById(id);
      if (!shaderScript) {
          return null;
      }
  
      var str = "";
      var k = shaderScript.firstChild;
      while (k) {
          if (k.nodeType == 3) {
              str += k.textContent;
          }
          k = k.nextSibling;
      }
  
      var shader;
      if (shaderScript.type == "x-shader/x-fragment") {
          shader = gl.createShader(gl.FRAGMENT_SHADER);
      } else if (shaderScript.type == "x-shader/x-vertex") {
          shader = gl.createShader(gl.VERTEX_SHADER);
      } else {
          return null;
      }
  
      gl.shaderSource(shader, str);
      gl.compileShader(shader);
  
      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
          alert(gl.getShaderInfoLog(shader));
          return null;
      }
  
      return shader;
    }
  
    var shaderProgram;
  
    function initShaders() {
      var fragmentShader = getShader(gl, "shader-fs");
      var vertexShader   = getShader(gl, "shader-vs");
  
      shaderProgram = gl.createProgram();
      gl.attachShader(shaderProgram, vertexShader);
      gl.attachShader(shaderProgram, fragmentShader);
      gl.linkProgram (shaderProgram);
  
      if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
          alert("Could not initialise shaders");
      }
  
      gl.useProgram(shaderProgram);
  
      shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
      gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);
  
      shaderProgram.vertexColorAttribute = gl.getAttribLocation(shaderProgram, "aVertexColor");
      gl.enableVertexAttribArray(shaderProgram.vertexColorAttribute);
  
      shaderProgram.pMatrixUniform  = gl.getUniformLocation(shaderProgram, "uPMatrix");
      shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
    }
  
  

    var Size= 8.0;
  
    var xRot   = 10;
    var Rot   = 10;
    var xSpeed = 10;
  
    var Invert = false;
    var yRot   = 10;
    var ySpeed = 10;
  
    var z = -8.0;
  
    var filter = 0;
  
  
    var currentlyPressedKeys = {};
  
  
    function degToRad(degrees) {
      return degrees * Math.PI / 180;
    }
  
  
    function handleKeyDown(event) {
          currentlyPressedKeys[event.keyCode] = true;
  
          if (String.fromCharCode(event.keyCode) == "F") {
              filter += 1;
              if (filter == 3) {
                  filter = 0;
              }
          }
          
          switch(String.fromCharCode(event.keyCode)) { 
          // Muda tamanho do objeto
         case ("E"): Size += 0.5;
           break;
         case ("Q"): Size -= 0.5;
           break;

          // Controle do quadradoo
           case ("W"):ySpeed -= 10;
             break;
           case ("A"): yRot -= 45;
             break;
           case ("S"): ySpeed  += 10;
             break;
           case ("D"): yRot += 45;
             break;
           case ("Z"): ySpeed  =0;
             break;
  
          // Controle Cor
           case ("I"): 
                if(Invert) Invert = false;
                else Invert = true;
             break;
  
           default:
             break;
          }
            
        
      }
  
  
      function handleKeyUp(event) {
          currentlyPressedKeys[event.keyCode] = false;
      }
  
  
      function handleKeys() {
          if (currentlyPressedKeys[33]) {
              // Page Up
              z -= 0.05;
          }
          if (currentlyPressedKeys[34]) {
              // Page Down
              z += 0.05;
          }
      }
  
  
  
  // INICIALIZACAO DA CENA - OBJETO - GEOMETRIA E TEXTURA  ==================================================
  
    var mvMatrix = mat4.create();
    var mvMatrixStack = [];
  
    var mvPyramidMatrix = mat4.create();
    var mvPyramidMatrixStack = [];
  
    var mvCubeMatrix = mat4.create();
    var mvCubeMatrixStack = [];
  
    var pMatrix = mat4.create();
    var pMatrixStack = [];
  
  // INICIALIZACAO DA MATRIZ GERAL ===================================================
  
    function mvpiramidPushMatrix() {
      var copy = mat4.create();
      mat4.set(mvMatrix, copy);
      mvMatrixStack.push(copy);
    }
  
    function mvPyramidPushMatrix() {
      var copy = mat4.create();
      mat4.set(mvPyramidMatrix, copy);
      mvPyramidMatrixStack.push(copy);
    }
  
    function mvCubePushMatrix() {
      var copy = mat4.create();
      mat4.set(mvCubeMatrix, copy);
      mvCubeMatrixStack.push(copy);
    }
  
    function pPushMatrix() {
      var copy = mat4.create();
      mat4.set(pMatrix, copy);
      pMatrixStack.push(copy);
    }
  
  // INICIALIZACAO DA MATRIZ MOVIMENTO ===================================================
  
    function mvPiramidPopMatrix() {
      if (mvMatrixStack.length == 0) {
        throw "Invalid popMatrix!";
      }
      mvMatrix = mvMatrixStack.pop();
    }
  
    function mvPyramidPopMatrix() {
      if (mvPyramidMatrixStack.length == 0) {
        throw "Invalid popMatrix!";
      }
      mvPyramidMatrix = mvPyramidMatrixStack.pop();
    }
  
    function mvCubePopMatrix() {
      if (mvCubeMatrixStack.length == 0) {
        throw "Invalid popMatrix!";
      }
      mvCubeMatrix = mvCubeMatrixStack.pop();
    }
  
    function pPopMatrix() {
      if (pMatrixStack.length == 0) {
        throw "Invalid popMatrix!";
      }
      pMatrix = pMatrixStack.pop();
    }
  
    function setPiramidMatrixUniforms() {
      gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
      gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
    }
  
    function setPyramidMatrixUniforms() {
      gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
      gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvPyramidMatrix);
    }
  
    function setCubeMatrixUniforms() {
      gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
      gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvCubeMatrix);
    }
  
    // DEFINICAO DOS OBJETOS ==================================================
  
    
  var piramidVertexPositionBuffer;
  var piramideVertexColorBuffer;
  var piramideVertexIndexBuffer;
  
  
  function initBuffers() {
    piramidVertexPositionBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, piramidVertexPositionBuffer);
      vertices = [
        -1.0, -1.0,  1.0,
         1.0, -1.0,  1.0,
         0.0,  1.0,  0.0,
  
      
         -1.0, -1.0, -1.0,   
         1.0,  -1.0, -1.0,
         0.0,  1.0, 0.0,
  
      
         -1.0, -1.0, -1.0,      
         1.0, -1.0, -1.0,
         1.0, -1.0,  1.0,
        -1.0, -1.0,  1.0,
  
        
         1.0, -1.0, -1.0,
         1.0,  -1.0, 1.0,
         0.0, 1.0,  0.0,
  
       
         -1.0, -1.0, -1.0,   
        -1.0, -1.0,  1.0,
          0.0,  1.0, 0.0
      ];
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
      piramidVertexPositionBuffer.itemSize = 3;
      piramidVertexPositionBuffer.numItems = 16;
  
  
  // DEFINICAO DAS CORES ===================================================
  
  piramideVertexColorBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, piramideVertexColorBuffer);
      colors = [
        [1.0, 0.0, 0.0, 1.0], 
        [1.0, 0.0, 0.0, 1.0],
        [1.0, 0.0, 0.0, 1.0],
        [0.0, 1.0, 0.0, 1.0],  
        [0.0, 1.0, 0.0, 1.0],
        [0.0, 1.0, 0.0, 1.0],
        [1.0, 1.0, 0.0, 1.0], 
        [1.0, 1.0, 0.0, 1.0],
        [1.0, 1.0, 0.0, 1.0],
        [1.0, 1.0, 0.0, 1.0],
        [1.0, 0.0, 1.0, 1.0], 
        [1.0, 0.0, 1.0, 1.0],
        [1.0, 0.0, 1.0, 1.0],
        [0.0, 1.0, 1.0, 1.0],  
        [0.0, 1.0, 1.0, 1.0],
        [0.0, 1.0, 1.0, 1.0]
      ];
      var unpackedColors = [];
      for (var i in colors) {
        var color = colors[i];
        unpackedColors = unpackedColors.concat(color);
      }
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(unpackedColors), gl.STATIC_DRAW);
      piramideVertexColorBuffer.itemSize = 4;
      piramideVertexColorBuffer.numItems = 16;
  
  
  // SEGMENTACAO EM TRIANGULOS ===================================================
                            
      piramideVertexIndexBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, piramideVertexIndexBuffer);
      var piramideVertexIndices = [
        0, 1, 2,      
        3, 4, 5,      
        6, 7, 8,      6, 8, 9,    
        10, 11, 12,   
        13, 14, 15,   
  
      ];
      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(piramideVertexIndices), 
        gl.STATIC_DRAW);
        piramideVertexIndexBuffer.itemSize = 1;
        piramideVertexIndexBuffer.numItems = 18;
    }
  
  
    var rPiramid = 0 
  
  // DEFINICAO DOS OBJETOS 2 ==================================================
  
  var PyramidVertexPositionBuffer;
  var PyramidVertexColorBuffer;
  var PyramidVertexIndexBuffer;
  
  function initBuffers2() {
      PyramidVertexPositionBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, PyramidVertexPositionBuffer);
      vertices = [
        // Front face: Red
        -1.0, -1.0,  1.0,
         1.0, -1.0,  1.0,
         0.0,  1.0,  0.0,     
  
        // Back face: Green
         -1.0, -1.0, -1.0,     
         1.0,  -1.0, -1.0,
         0.0,  1.0, 0.0,
  
        // Bottom face: Yellow
         -1.0, -1.0, -1.0,      
         1.0, -1.0, -1.0,
         1.0, -1.0,  1.0,
        -1.0, -1.0,  1.0,
  
        // Right face: Magent
         1.0, -1.0, -1.0,
         1.0,  -1.0, 1.0,
         0.0, 1.0,  0.0,
  
        // Left face: Cyan
         -1.0, -1.0, -1.0,     
        -1.0, -1.0,  1.0,
          0.0,  1.0, 0.0
      ];
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
      PyramidVertexPositionBuffer.itemSize = 3;
      PyramidVertexPositionBuffer.numItems = 16;
  
  
  // DEFINICAO DAS CORES ===================================================
  
      PyramidVertexColorBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, PyramidVertexColorBuffer);
      colors = [
        [1.0, 0.0, 0.0, 1.0],
        [1.0, 0.0, 0.0, 1.0],
        [1.0, 0.0, 0.0, 1.0],
        [0.0, 1.0, 0.0, 1.0],  
        [0.0, 1.0, 0.0, 1.0],
        [0.0, 1.0, 0.0, 1.0],
        [1.0, 1.0, 0.0, 1.0],
        [1.0, 1.0, 0.0, 1.0],
        [1.0, 1.0, 0.0, 1.0],
        [1.0, 1.0, 0.0, 1.0],
        [1.0, 0.0, 1.0, 1.0], 
        [1.0, 0.0, 1.0, 1.0],
        [1.0, 0.0, 1.0, 1.0],
        [0.0, 1.0, 1.0, 1.0],  
        [0.0, 1.0, 1.0, 1.0],
        [0.0, 1.0, 1.0, 1.0]
      ];
      var unpackedColors = [];
      for (var i in colors) {
        var color = colors[i];
        unpackedColors = unpackedColors.concat(color);
      }
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(unpackedColors), gl.STATIC_DRAW);
      PyramidVertexColorBuffer.itemSize = 4;
      PyramidVertexColorBuffer.numItems = 16;
  
  
  // SEGMENTACAO EM TRIANGULOS ===================================================
                            
      PyramidVertexIndexBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, PyramidVertexIndexBuffer);
      var PyramidVertexIndices = [
        0, 1, 2,     
        3, 4, 5,     
        6, 7, 8,      6, 8, 9,    
        10, 11, 12, 
        13, 14, 15,  
  
      ];
      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(PyramidVertexIndices), 
        gl.STATIC_DRAW);
      PyramidVertexIndexBuffer.itemSize = 1;
      PyramidVertexIndexBuffer.numItems = 18;
    }
  
    var rPyramid = 0;
  
  
  
  // DEFINICAO DOS OBJETOS3 ==================================================
  
  var cubeVertexPositionBuffer;
    var cubeVertexColorBuffer;
    var cubeVertexIndexBuffer;
  
    function initBuffers3() {
      cubeVertexPositionBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
      vertices = [
      
        -1.0, -1.0,  1.0,
         1.0, -1.0,  1.0,
         1.0,  1.0,  1.0,      
        -1.0,  1.0,  1.0,
  
         -1.0, -1.0, -1.0,      
        -1.0,  1.0, -1.0,
         1.0,  1.0, -1.0,
         1.0, -1.0, -1.0,
  
        -1.0,  1.0, -1.0,
        -1.0,  1.0,  1.0,
         1.0,  1.0,  1.0,      
         1.0,  1.0, -1.0,
  
         -1.0, -1.0, -1.0,      
         1.0, -1.0, -1.0,
         1.0, -1.0,  1.0,
        -1.0, -1.0,  1.0,
  
    
         1.0, -1.0, -1.0,
         1.0,  1.0, -1.0,
         1.0,  1.0,  1.0,      
         1.0, -1.0,  1.0,
  
        
         -1.0, -1.0, -1.0,      
        -1.0, -1.0,  1.0,
        -1.0,  1.0,  1.0,
        -1.0,  1.0, -1.0
      ];
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
      cubeVertexPositionBuffer.itemSize = 3;
      cubeVertexPositionBuffer.numItems = 24;
  
  
  // DEFINICAO DAS CORES ===================================================
  
      cubeVertexColorBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
      colors = [
        [1.0, 0.0, 0.0, 1.0], 
        [1.0, 0.0, 0.0, 1.0],  
        [0.0, 0.0, 1.0, 1.0], 
        [1.0, 1.0 , 0.0, 1.0],
        [1.0, 0.0, 1.0, 1.0], 
        [0.0, 1.0, 1.0, 1.0]  
      ];
  
      var unpackedColors = [];
      for (var i in colors) {
        var color = colors[i];
        for (var j=0; j < 4; j++) {
          unpackedColors = unpackedColors.concat(color);
        }
      }
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(unpackedColors), gl.STATIC_DRAW);
      cubeVertexColorBuffer.itemSize = 4;
      cubeVertexColorBuffer.numItems = 24;
  
  
  // SEGMENTACAO EM TRIANGULOS ===================================================
                            
      cubeVertexIndexBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
      var cubeVertexIndices = [
        0, 1, 2,      0, 2, 3,    
        4, 5, 6,      4, 6, 7,    
        8, 9, 10,     8, 10, 11,  
        12, 13, 14,   12, 14, 15, 
        16, 17, 18,   16, 18, 19, 
        20, 21, 22,   20, 22, 23  
      ];
      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), 
        gl.STATIC_DRAW);
      cubeVertexIndexBuffer.itemSize = 1;
      cubeVertexIndexBuffer.numItems = 36;
    }
  
    var rCube = 0;
  
  // FOTOGRAFAR ===================================================
                            
    function drawScene() {
      gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
  
      mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
      
      mat4.identity(mvMatrix);
      mat4.translate(mvMatrix, [0.0, -0, -8.0]);
      
      mat4.identity(mvPyramidMatrix);
      mat4.translate(mvPyramidMatrix, [3.0, 0.0, -8.0]);
  
      mat4.identity(mvCubeMatrix);
      mat4.translate(mvCubeMatrix, [-3.0,0 , -Size]);
  
      mat4.translate(pMatrix, [0.0, 0.0, 0]);
  
      mvpiramidPushMatrix();
      pPushMatrix();
  
      mat4.rotate(mvMatrix, degToRad(Rot*5), [1, 0.5, 0]); 
  
      mat4.rotate(mvCubeMatrix, degToRad(xRot), [1, 0, 0]);    
      mat4.rotate(mvCubeMatrix, degToRad(yRot), [0, 1, 0]);
  
      mat4.rotate(mvPyramidMatrix, 45, [1, 0, 0]);     
      mat4.rotate(mvPyramidMatrix, 10, [0, 1, 0]); 
  
      gl.bindBuffer(gl.ARRAY_BUFFER, piramidVertexPositionBuffer);
      gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, 
      piramidVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
  
      gl.bindBuffer(gl.ARRAY_BUFFER, piramideVertexColorBuffer);
      colors = [
        [ !Invert, Invert, Invert, 1.0], 
        [ Invert, !Invert, Invert, 1.0],  
        [ Invert, Invert, !Invert, 1.0], 
        [ Invert, !Invert, Invert, 1.0],  
        [! Invert, Invert, Invert, 1.0] 
      ]; 
      
      var unpackedColors = [];
      for (var i in colors) {
        var color = colors[i];
        for (var j=0; j < 4; j++) {
          unpackedColors = unpackedColors.concat(color);
        }
      }
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(unpackedColors), gl.STATIC_DRAW);
      piramideVertexColorBuffer.itemSize = 4;
      piramideVertexColorBuffer.numItems =20;
  
      gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, 
      piramideVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
  
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, piramideVertexIndexBuffer);
      setPiramidMatrixUniforms();
      gl.drawElements(gl.TRIANGLES, piramideVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
  
      mvPiramidPopMatrix();
  
  //-----------------------------------------Cube--------------------------------------
  
  gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
      gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, 
        cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
  
      
      gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
      
      gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, 
        cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
  
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
      setCubeMatrixUniforms();
      gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);

   
  
    
  //-----------------------------------------Pyramid--------------------------------------
      
  
      gl.bindBuffer(gl.ARRAY_BUFFER, PyramidVertexPositionBuffer);
      gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, 
        PyramidVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
  
      gl.bindBuffer(gl.ARRAY_BUFFER, PyramidVertexColorBuffer);
      gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, 
        PyramidVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
  
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, PyramidVertexIndexBuffer);
      setPyramidMatrixUniforms();
      gl.drawElements(gl.TRIANGLES, PyramidVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
  
  pPopMatrix();
  }
  
    var lastTime = 0;
  
  // ANIMAR 
                            
    function animate() {
      var currentTime = new Date().getTime();
      if (lastTime != 0) {
        var elapsed = currentTime - lastTime;
        rPiramid -= (75 * elapsed) / 1000.0;
  
        xRot += (xSpeed * elapsed) / 1000.0;
        yRot += (ySpeed * elapsed) / 1000.0;
        
        Rot += (20* elapsed) / 1000.0;
       
  
                            }
      lastTime = currentTime;
    }
  
    function tick() {
      requestAnimFrame(tick);
      drawScene();
      animate();
    }
  
    function webGLStart() {
      var canvas = document.getElementById("Gui");
      initGL(canvas);
      initShaders()
      initBuffers();
      initBuffers2();
      initBuffers3();
      gl.clearColor(0.0, 0.0, 0.0, 1.0);
      gl.enable(gl.DEPTH_TEST);
        
      document.onkeydown = handleKeyDown;
      document.onkeyup   = handleKeyUp;
  
      tick();
    }</script>
  </head>
  
  <body onload="webGLStart();">
      <canvas id="Gui" width="1280" height="600"></canvas>
  
      <h2>Controls:</h2>
  
      <ul>
  <ul><a>_W_</a></ul><ul><a>A</a><a>S</a><a>D</a></ul>
  </ul>
  
  
  <ul>
  <li><code>A = Rota</code></li>
  <li><code>S = desacelera</code></li>
  <li><code>D = Rota</code></li>
  <li><code>W = Acelera</code></li>
  <li><code>Z = Para</code></li>
  <li><code>Q = +Aproxima</code></li>
  <li><code>E = +Afasta</code></li>
  
  </ul>
  

  <ul>
    <h3>Trocar Cores da Piramide Cental:</h3>
  <ul>
  <code> I </code>
  </ul>
  
  
    
      
  
  
  
  
  
  
  </body></html>